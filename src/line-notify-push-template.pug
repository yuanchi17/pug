extends /layout

block beforehtml
  -
    const title = 'LINE Notify 推送訊息工具'
    const description = 'LINE Notify 推送訊息工具'

block style
  meta(name="description" content=description)
  meta(property="og:description", content=description)
  style
    :sass
      [v-cloak]
        display: none
      body 
        margin-top: 55px
      .alert
        white-space: pre-wrap
      textarea
        min-height: 300px
      .textarea-img
        min-height: 40px

block content
  include /navbar
  #app.content.container.text-monospace.mb-3(v-cloak)
    h2.py-3.m-0 LINE Notify 推送訊息工具
    .form-group
      label(for="inputCsv") CSV 網址（資料會放到參數 #[span.text-danger row]，且以第一列當作 key）
      input.form-control(type="text" id="inputCsv" v-model="s.csv" placeholder="請填寫 CSV 網址")
    .card.mb-3(v-for="(msg, msgId) in s.msgs" :key="msgId")
      .card-body
        .d-flex
          h5.card-title.mt-auto.mb-0 第 {{ msgId+1 }} 筆訊息
          .d-flex.ml-auto
            button.btn.btn-info.btn-sm.mr-2(type="button" @click="btnClearMsg(msgId)") #[i.fa.fa-fw.fa-repeat] 清除
            button.btn.btn-danger.btn-sm(type="button" @click="btnDelMsg(msgId)") #[i.fa.fa-times]
        small.text-muted 皆可使用 #[a.text-danger(target="_blank" href="https://lodash.com/docs/4.17.15#template") _.template] 變數語法
        .row.mt-2
          .col
            .form-group
              label(:for="`inputStickerPackageId-${msgId}`") StickerPackageId
              button.btn.btn-link.py-0(type="button" @click="btnStickerTeach") #[i.fa.fa-question-circle-o]
              input.form-control(type="text" :id="`inputStickerPackageId-${msgId}`" v-model="msg.stickerPackageId" placeholder="（選填）")
          .col
            .form-group
              label(:for="`inputStickerId-${msgId}`") StickerId
              button.btn.btn-link.py-0(type="button" @click="btnStickerTeach") #[i.fa.fa-question-circle-o]
              input.form-control(type="text" :id="`inputStickerId-${msgId}`" v-model="msg.stickerId" placeholder="（選填）")
        .row
          .col
            .form-group 
              label(:for="`inputImgF-${msgId}`") 圖片連結（HTTPS）
              textarea.textarea-img.form-control(type="text" :id="`inputImgF-${msgId}`" v-model="msg.imageFullsize" placeholder="（選填）")
        .row
          .col
            .form-group 
              label(:for="`inputImgT-${msgId}`") 縮圖連結（HTTPS）
              textarea.textarea-img.form-control(type="text" :id="`inputImgT-${msgId}`" v-model="msg.imageThumbnail" placeholder="（選填）")
        .form-group 
          label(:for="`inputMsg-${msgId}`") 推送訊息內容
          textarea.form-control(type="text" :id="`inputMsg-${msgId}`" v-model="msg.message" placeholder="（必填，可填寫空格）")
    .alert.alert-danger.alert-dismissible.fade.show.mt-3(role="alert" v-if="errors")
      p.m-0 {{ errors }}#[br]欲了解詳細錯誤資訊，請按 F12 查看 Console
      button.close(type="button" data-dismiss="alert" aria-label="Close" @click="errors = ''")
        span(aria-hidden) &times;
    .alert.alert-success.alert-dismissible.fade.show.mt-3(role="alert" v-if="pushStatus.finish && pushStatus.success > 0")
      p.m-0 成功推送給 {{ pushStatus.success }}／{{ pushStatus.userCount }} 位使用者 {{ s.msgs.length }} 筆訊息
      button.close(type="button" data-dismiss="alert" aria-label="Close")
        span(aria-hidden) &times;
    .row-n2
      button.btn.btn-success.mx-1.my-1(type="button" @click="btnShareMsg" v-if="s.msgs.length > 0") 分享測試訊息
      button.btn.btn-danger.mx-1.my-1(type="button" @click="btnPushMsg" v-if="s.msgs.length > 0") 推送訊息
      button.btn.btn-info.mx-1.my-1(type="button" @click="btnAddMsg") 新增推送訊息
      a.btn.btn-outline-info.mx-1.my-1(target="_blank" href="https://line.me/R/ti/p/@736cebrk" data-toggle="tooltip" data-placement="top" title="by 和風信使 taichunmin") Flex 開發人員工具
      a.btn.btn-outline-info.mx-1.my-1(target="_blank" href="https://developers.line.biz/en/docs/messaging-api/sticker-list/#sticker-definitions") Sticker 清單
      a.btn.btn-outline-info.mx-1.my-1(target="_blank" href="https://notify-bot.line.me/doc/en/") Notify API 文件

block script
  script(src="https://static.line-scdn.net/liff/edge/2/sdk.js")
  script.
    const loginPromise = (async () => {
      await liff.init({ liffId: '1654061069-YXLwqzBw' }) // 正式
      //- await liff.init({ liffId: '1654061069-5ypKqEoK' }) // 開發
      if (!liff.isLoggedIn()) {
        liff.login({ redirectUri: location.href })
        return await new Promise(resolve => {}) // 永遠不會結束的 Promise
      }
    })()
    const SESSION_KEY = 'pug-line-notify-push-template'
    window.vm = new Vue({
      el: '#app',
      data: {
        errors: '',
        pushStatus: {}, // 推送狀態
        s: {
          csv: '',
          msgs: [
            {
              imageFullsize: '${_.get(row, "imageFullsize", "https://i.imgur.com/o0tEo3q.png")}',  // eslint-disable-line
              imageThumbnail: '${_.get(row, "imageThumbnail", "https://i.imgur.com/o0tEo3q.png")}',  // eslint-disable-line
              message: '<% function count(a) { return a+1 } %>\n\n嗨～這是傳給 ${_.get(row, "name", "無使用者")} 的第 ${count(0)} 則預設訊息\n\n請自行更改訊息內容：）', // eslint-disable-line
              stickerId: '${_.get(row, "stickerId", 106)}', // eslint-disable-line
              stickerPackageId: '${_.get(row, "stickerPackageId", 1)}', // eslint-disable-line
            },
          ],
        },
      },
      async mounted () {
        await loginPromise
        this.autoSaveLocalstorage()
      },
      methods: {
        autoSaveLocalstorage () {
          const session = JSON.parse(localStorage.getItem(SESSION_KEY))
          if (session) this.$set(this, 's', session)
          this.$watch('s', () => {
            localStorage.setItem(SESSION_KEY, JSON.stringify(this.s))
          }, { deep: true })
        },
        async btnPushMsg () {
          const errors = []
          this.errors = ''
          this.pushStatus = { success: 0, count: 0, userCount: 0, finish: false }
          try {
            const data = this.s
            this.checkMsgs(data.msgs)

            this.showLoading('請稍後', '讀取 CSV 中')
            const rows = await this.getCsv(data.csv)
            if (rows.length < 1) throw new Error('無法從此 CSV 內讀取資料')
            if (!rows[0].access_token) throw new Error('CSV 格式錯誤：缺少參數「access_token」')

            const pushStatus = this.pushStatus
            pushStatus.userCount = rows.length
            const result = await Swal.fire({
              icon: 'warning',
              title: '準備推送訊息',
              text: `即將推送給 ${pushStatus.userCount} 位使用者 ${data.msgs.length} 筆訊息！`,
              showCancelButton: true,
              showConfirmButton: false,
              showDenyButton: true,
              cancelButtonText: '取消',
              denyButtonText: '推送',
            })
            if (!result.isDenied) throw new Error('已取消推送訊息')

            this.showLoading('請稍後', '編譯訊息樣版中')
            const templateMsgs = this.compileTemplate(data.msgs)

            for (const row of rows) {
              try {
                pushStatus.count++
                this.showLoading('請稍後', '編譯訊息中')
                const notifyMsgs = _.map(templateMsgs, msg => _.mapValues(msg, m => m({ Qs, _, row })))

                for (const [i, notifyMsg] of _.toPairs(notifyMsgs)) {
                  this.showLoading('請稍後', `正在推送給第 ${pushStatus.count}／${pushStatus.userCount} 位使用者，第 ${_.parseInt(i) + 1} 筆訊息`)
                  await this.apiNotify({
                    accessToken: row.access_token,
                    notifyMsg,
                  })
                }
                pushStatus.success++ // 推送成功
              } catch (err) {
                err.message = _.get(err, 'response.data.message', err.message)
                if (_.get(err, 'response.data.status') === 400) throw new Error(`推送訊息格式錯誤：${err.message}`)
                errors.push(`第 ${pushStatus.count} 位使用者訊息推送失敗：${err.message}`)
                console.error(err)
              }
            }
          } catch (err) {
            console.error(err)
            errors.push(err.message)
            Swal.fire({ icon: 'error', title: '推送失敗', text: err.message })
          }
          Swal.close()
          this.errors = errors.join('\n')
          this.pushStatus.finish = true
        },
        async btnShareMsg () {
          const errors = []
          this.errors = ''
          this.pushStatus = {}
          try {
            const data = this.s
            if (!liff.isApiAvailable('shareTargetPicker')) throw new Error('不支援 shareTargetPicker，請嘗試更新應用程式版本。')
            this.checkMsgs(data.msgs)

            this.showLoading('請稍後', '讀取 CSV 中')
            const row = _.head(await this.getCsv(data.csv))
            if (!row) throw new Error('無法從此 CSV 內讀取資料')

            this.showLoading('請稍後', '編譯訊息中')
            const templateMsgs = this.compileTemplate(data.msgs) // 編譯訊息樣版
            const msgs = _.map(templateMsgs, msg => _.mapValues(msg, m => m({ Qs, _, row }))) // 編譯訊息
            const chunks = _.chain(msgs) // 轉換成 shareTargetPicker 的訊息格式
              .map(this.getShareMsgs)
              .flatten()
              .chunk(5)
              .value() 

            for (const [chunkNo, chunk] of _.toPairs(chunks)) {
              this.showLoading('分享測試訊息', `分享 (${_.parseInt(chunkNo) + 1} / ${chunks.length}) 次`)
              const res = await liff.shareTargetPicker(chunk)
              if (_.get(res, 'status') !== 'success') throw new Error('傳送失敗')
            }

            await Swal.fire({ icon: 'success', title: '分享測試訊息成功' })
          } catch (err) {
            console.error(err)
            errors.push(err.message)
            await Swal.fire({ icon: 'error', title: '分享測試訊息失敗', text: err.message })
          }
          this.errors = errors.join('\n')
        },
        async btnAddMsg () {
          this.s.msgs.push({
            imageFullsize: '${row.imageFullsize}',  // eslint-disable-line
            imageThumbnail: '${row.imageThumbnail}',  // eslint-disable-line
            message: '${row.message}',  // eslint-disable-line
            stickerId: '${row.stickerId}',  // eslint-disable-line
            stickerPackageId: '${row.stickerPackageId}',  // eslint-disable-line
          })
        },
        async btnDelMsg (msgId) {
          const result = await Swal.fire({
            icon: 'warning',
            title: `即將刪除第 ${msgId + 1} 筆訊息`,
            showCancelButton: true,
            cancelButtonText: '取消',
            confirmButtonText: '確定',
          })
          if (!result.value) return

          this.s.msgs.splice(msgId, 1)
        },
        async btnClearMsg (msgId) {
          const result = await Swal.fire({
            icon: 'warning',
            title: `即將清空第 ${msgId + 1} 筆訊息的欄位`,
            showCancelButton: true,
            cancelButtonText: '取消',
            confirmButtonText: '確定',
          })
          if (!result.value) return

          this.$set(this.s.msgs, msgId, {
            imageFullsize: '',
            imageThumbnail: '',
            message: '',
            stickerId: '',
            stickerPackageId: '',
          })
        },
        checkMsgs (msgs) {
          for (const msg of msgs) {
            if (!msg.message) throw new Error('推送訊息內容不可為空')
            if (!!msg.imageFullsize ^ !!msg.imageThumbnail) throw new Error('若要推送圖片，圖片連結不可為空')
            if (!!msg.stickerPackageId ^ !!msg.stickerId) throw new Error('若要推送貼圖，StickerPackageId 及 StickerId 不可為空')
          }
        },
        getShareMsgs (msg) {
          return [
            {
              type: 'text',
              text: `【分享測試訊息】${msg.message}`,
            },
            ...(msg.stickerId
              ? [{
                  type: 'image',
                  originalContentUrl: `https://stickershop.line-scdn.net/stickershop/v1/sticker/${msg.stickerId}/android/sticker.png`,
                  previewImageUrl: `https://stickershop.line-scdn.net/stickershop/v1/sticker/${msg.stickerId}/android/sticker.png`,
                }]
              : []),
            ...(msg.imageFullsize
              ? [{
                  type: 'image',
                  originalContentUrl: msg.imageFullsize,
                  previewImageUrl: msg.imageThumbnail,
                }]
              : []),
          ]
        },
        compileTemplate (msgs) {
          return _.map(msgs, msg => _.mapValues(msg, _.template))
        },
        async apiNotify ({ accessToken, notifyMsg }) {
          try {
            await axios.post('https://us-central1-yuanchi.cloudfunctions.net/cors-anywhere', Qs.stringify(notifyMsg), {
              params: { u: 'https://notify-api.line.me/api/notify' },
              headers: {
                Authorization: `Bearer ${accessToken}`,
              },
            })
          } catch (err) {
            err.message = _.get(err, 'response.data.message', err.message)
            err.status = _.get(err, 'response.status', 500)
            if (err.status === 401) err.message = `token 已失效 (${token})`
            throw err
          }
        },
        async getCsv (url) {
          const csv = _.trim(_.get(await axios.get(url), 'data')) // _.trim：把前後多餘的空格修掉
          return _.get(Papa.parse(csv, {
            encoding: 'utf8',
            header: true,
          }), 'data', [])
        },
        async btnStickerTeach () {
          const result = await Swal.fire({
            icon: 'info',
            title: 'Sticker 查找教學',
            text: '查看 Sticker 清單，或使用「Flex 開發人員工具」傳送貼圖，即可找到 stickerId 及 packageId',
            showCancelButton: true,
            showDenyButton: true,
            cancelButtonText: '關閉',
            confirmButtonText: 'Sticker 清單',
            denyButtonText: 'Flex 開發人員工具',
          })

          if (result.isDenied) window.open('https://line.me/R/ti/p/@736cebrk')
          if (result.isConfirmed) window.open('https://developers.line.biz/en/docs/messaging-api/sticker-list/#sticker-definitions')
        },
        async showLoading (title, text) {
          await Swal.fire({
            title,
            text,
            allowOutsideClick: false,
            showConfirmButton: false,
            willOpen: () => { Swal.showLoading() },
          })
        },
      },
    })
