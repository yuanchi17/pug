extends layout

block beforehtml
  - const title = 'YouBike 特定站點地圖'

block style
  link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/bootstrap@4/dist/css/bootstrap.min.css")
  link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/font-awesome@4/css/font-awesome.min.css")
  link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/leaflet.markercluster@1/dist/MarkerCluster.css")
  link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/leaflet.markercluster@1/dist/MarkerCluster.Default.css")
  link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/leaflet@1/dist/leaflet.min.css")
  style
    :sass
      [v-cloak]
        display: none
      html, body, #app, #map
        height: 100%
        width: 100vw
      #app
        position: relative
      #ubike-visible
        background-color: white
        padding: .3rem .5rem
        position: absolute
        right: 10px
        top: 10px
      .unselectable
        -webkit-user-select: none
        -moz-user-select: none
        -ms-user-select: none
        user-select: none
      .leaflet-popup-content
        font-size: 14px
        h6
          font-size: 18px
        .table-station
          th
            white-space: nowrap
          td
            text-align: right
      .location-circle-tooltip
        &.leaflet-tooltip
          background: transparent
          border: none
          box-shadow: none
        &.leaflet-tooltip-top:before
          border: none
      .hide-location-circle
        .location-circle, .location-circle-tooltip
          visibility: hidden
      .marker-cluster-yb1
        background-color: rgba(255, 158, 21, 0.5)
        >div
          background-color: rgba(255, 158, 21, 0.5)
      .marker-cluster-yb2
        background-color: rgba(162, 41, 41, 0.4)
        >div
          background-color: rgba(162, 41, 41, 0.4)
          color: #ffffff
block content
  #app(v-cloak, :class="{'hide-location-circle': mapZoom < 14}")
    #ubike-visible.leaflet-bar.leaflet-control.unselectable.text-monospace(v-if="_.keys(visible).length")
      .custom-control.custom-switch(v-for="(v, k) in visible", :key="k")
        input.custom-control-input(type="checkbox", v-model="visible[k]", :id="`switch-ubike${k}`")
        label.custom-control-label(:for="`switch-ubike${k}`") YouBike {{ k }}.0
    #map

block script
  script(crossorigin="anonymous", src="https://cdn.jsdelivr.net/npm/@hapi/joi@17/dist/joi-browser.min.js")
  script(crossorigin="anonymous", src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js")
  script(crossorigin="anonymous", src="https://cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js")
  script(crossorigin="anonymous", src="https://cdn.jsdelivr.net/npm/lodash@4/lodash.min.js")
  script(crossorigin="anonymous", src="https://cdn.jsdelivr.net/npm/papaparse@5/papaparse.min.js")
  script(crossorigin="anonymous", src="https://cdn.jsdelivr.net/npm/popper.js@1/dist/umd/popper.min.js")
  script(crossorigin="anonymous", src="https://cdn.jsdelivr.net/npm/qs@6/dist/qs.min.js")
  script(crossorigin="anonymous", src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.min.js")
  script(crossorigin="anonymous", src="https://cdn.jsdelivr.net/npm/leaflet@1/dist/leaflet.min.js")
  script(crossorigin="anonymous", src="https://cdn.jsdelivr.net/npm/leaflet.markercluster@1/dist/leaflet.markercluster.min.js")
  script(crossorigin="anonymous", src="https://cdn.jsdelivr.net/npm/moment@2/moment.min.js")
  script(crossorigin="anonymous", src="https://cdn.jsdelivr.net/npm/moment@2/locale/zh-tw.min.js")
  //- bootstrap require jquery and pupper
  script(crossorigin="anonymous", src="https://cdn.jsdelivr.net/npm/bootstrap@4/dist/js/bootstrap.min.js")
  script.
    const verifyStationRealtime = (() => {
      const schema = joi.object({
        id: joi.number().integer().min(1).empty('').required(),
        name: joi.string().empty('').required(),
        type: joi.number().integer().valid(1, 2).empty('').required(),
        space: joi.number().integer().min(0).default(0).empty(''),
        full: joi.number().integer().min(0).default(0).empty(''),
        empty: joi.number().integer().min(0).default(0).empty(''),
        city: joi.string().empty('').optional(),
        area: joi.string().empty('').optional(),
        lat: joi.number().min(21).max(28).empty('0').required(),
        lng: joi.number().min(117).max(123).empty('0').required(),
        place_id: joi.string().empty('').optional(),
        address: joi.string().empty('').optional(),
        is_open: joi.number().integer().min(0).default(0).empty(''),
        updated_at: joi.date().timestamp('unix').required(),
      })
      return value => schema.validateAsync(value, { stripUnknown: true })
    })()

    const IMAGE_BASEURL = 'https://gcs-youbike2-linebot.taichunmin.idv.tw/theme1/maps/'
    const stationToIcon = (() => {
      const LeafIcon = L.Icon.extend({
        options: {
          iconAnchor: [13, 37],
          iconSize: [26, 40],
          popupAnchor: [0, -39],
        },
      })
      const ICONS = {}
      const getIcon = (type, status) => {
        const key = `${status}-${type}`
        if (!ICONS[key]) ICONS[key] = new LeafIcon({ iconUrl: `${IMAGE_BASEURL}station-${key}.png?t=20210805` })
        return ICONS[key]
      }
      return s => {
        if (s.is_open !== 1) return getIcon(s.type, 'closed')
        if (s.space === 0) return getIcon(s.type, 'full')
        if (s.full === 0) return getIcon(s.type, 'empty')
        return getIcon(s.type, 'normal')
      }
    })()
    const httpBuildQuery = obj => Qs.stringify(obj, { arrayFormat: 'brackets' })
    const stationToPopup = (() => {
      const stationToGoogleMap = station => {
        const baseUrl = 'https://www.google.com/maps/dir/?'
        const query = {
          api: 1,
          destination: `${station.lat},${station.lng}`,
          travelmode: 'walking',
        }
        if (_.isString(station.place_id) && station.place_id) query.destination_place_id = station.place_id
        return baseUrl + httpBuildQuery(query)
      }

      return s => `<h6 class="mb-2"><strong>${s.name}${s.is_open === 1 ? '' : ' (暫停營運)'}</strong></h6>
    <table class="table table-sm table-borderless table-station text-monospace">
      <tr><th><i class="fa fa-star text-warning"></i> 可借車輛</th><td> ${s.full} 輛</td></tr>
      <tr><th><i class="fa fa-star text-warning"></i> 可停空位</th><td> ${s.empty} 輛</td></tr>
      <tr><th><i class="fa fa-star text-warning"></i> 更新時間</th><td class="text-nowrap">${moment(s.updated_at).format('MM/DD HH:mm')}</td></tr>
    </table>
    <a class="btn btn-dark btn-sm btn-block text-white" href="${stationToGoogleMap(s)}" role="button" target="_blank">
      Google 導航
    </a>`
    })()

    let map
    window.parseJsonOrDefault = (str, defaultValue) => {
      try {
        if (!_.isString(str) && !_.isBuffer(str)) return defaultValue
        return JSON.parse(str)
      } catch (err) {
        return defaultValue
      }
    }
    window.sleep = t => new Promise(resolve => { setTimeout(resolve, t) })
    window.vm = new Vue({
      el: '#app',
      data: {
        mapZoom: 15,
        sId: '',
        src: 'https://gcs-youbike2-linebot.taichunmin.idv.tw/latest-data/youbike-station.csv',
        someSids: 'https://gist.githubusercontent.com/yuanchi17/4c28d9d613f9ee5565cf3dbc13a65934/raw/some-youbike-maps.csv',
        visible: {},
      },
      async mounted () {
        moment.locale('zh-tw')
        this.$set(this, 'sId', parseInt(this.param('sId')))
        this.initMap()
        this.initStations()
      },
      methods: {
        async initMap () {
          const coord = {
            lat: this.param('lat', 25.0408578889),
            lng: this.param('lng', 121.567904444),
            zoom: this.param('zoom', 15),
          }
          const tiles = L.tileLayer('https://{s}.basemaps.cartocdn.com/rastertiles/light_all/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, &copy; <a href="https://carto.com/attribution">CARTO</a>',
          })
          map = L.map('map', {
            center: [coord.lat, coord.lng],
            zoom: coord.zoom,
            layers: [tiles],
            tap: false, //- https://github.com/Leaflet/Leaflet/issues/3184
          })
          const addLocationCircle = (radius, opacity) => {
            const c = L.circle([coord.lat, coord.lng], {
              className: 'location-circle',
              stroke: false,
              fillColor: '#00beff',
              fillOpacity: opacity,
              radius,
            }).addTo(map)
            L.tooltip({
              className: 'location-circle-tooltip',
              direction: 'top',
              offset: L.point([0, 21]),
              opacity: 0.8,
              permanent: true,
            }).setContent(`${radius}m`).setLatLng([c.getBounds().getNorth(), coord.lng]).addTo(map)
          }
          addLocationCircle(300, 0.2)
          addLocationCircle(1000, 0.1)
          L.marker([coord.lat, coord.lng], {
            icon: L.icon({
              iconAnchor: [10, 36],
              iconSize: [20, 38],
              iconUrl: `${IMAGE_BASEURL}marker.png?t=20201126`,
              popupAnchor: [0, -38],
            }),
          }).addTo(map)
          map.on('zoomend', () => { this.mapZoom = map.getZoom() })
        },
        async getStations () {
          const someSids = _.map(await this.getCsv(this.someSids), t => _.toSafeInteger(t.sid)) // 欲顯示的特定站點
          const stations = _.filter(await this.getCsv(this.src), t=> { return someSids.indexOf(_.toSafeInteger(t.id)) !== -1 } )

          const nowts = Date.now()
          return _.filter(await Promise.all(_.map(stations, async s => {
            try {
              s = await verifyStationRealtime(s)
              if (s.is_open === 1 && ((s.empty + s.full) < 1 || (nowts - s.updated_at) >= 864e5)) s.is_open = 2
              return s
            } catch (err) {
              return null
            }
          })))
        },
        async initStations () {
          const saved = window.parseJsonOrDefault(localStorage.getItem('youbike-maps-visible'), {})
          const types = window.types = _.groupBy(await this.getStations(), 'type') // 根據 type 進行分組

          _.each(types, async (stations, type) => {
            let focus = null
            const className = `marker-cluster marker-cluster-yb${type}`
            const cluster = L.markerClusterGroup({
              chunkedLoading: true,
              disableClusteringAtZoom: 15,
              spiderfyOnMaxZoom: false,
              iconCreateFunction: cluster => {
                return new L.DivIcon({
                  className,
                  html: `<div><span>${cluster.getChildCount()}</span></div>`,
                  iconSize: new L.Point(40, 40),
                })
              },
            }).addLayers(_.map(stations, s => {
              const marker = L.marker([s.lat, s.lng], { icon: stationToIcon(s) })
                .bindPopup(stationToPopup(s), { minWidth: 200 })
              if (this.sId === s.id) focus = marker
              return marker
            }))
            this.$set(this.visible, type, false)
            this.$watch(`visible.${type}`, (newVal, oldVal) => {
              const hasLayer = map.hasLayer(cluster)
              if (hasLayer ^ newVal) {
                map[newVal ? 'addLayer' : 'removeLayer'](cluster)
                localStorage.setItem('youbike-maps-visible', JSON.stringify(this.visible))
              }
            })
            if (_.get(saved, type, true) || focus) this.$set(this.visible, type, true)
            if (focus) {
              await window.sleep(100)
              focus.openPopup()
            }
          })
        },
        async getCsv (url) {
          const csv = _.trim(_.get(await axios.get(url, {
            params: { cachebust: _.floor(Date.now() / 3e4) },
          }), 'data'))
          return _.get(Papa.parse(csv, {
            encoding: 'utf8',
            header: true,
          }), 'data', [])
        },
        parseJsonOrDefault (str, defaultValue) {
          try {
            return JSON.parse(str)
          } catch (err) {
            return defaultValue
          }
        },
        param (key, defaultValue) {
          const val = new URL(location).searchParams.get(key)
          return _.isNil(val) ? defaultValue : val
        },
      },
    })
